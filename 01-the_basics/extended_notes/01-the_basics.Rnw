\documentclass{article}

\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage{nth}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}


\usepackage[a4paper,
            left=2.3cm,
            right=2.3cm,
            bottom=2.3cm,
            top=2.8cm,
            footskip=32pt]{geometry}   
\usepackage{graphicx}
\usepackage{fancyhdr}
\usepackage{rotating}
\usepackage[sort]{natbib} 
\usepackage{amsmath, amssymb, bm}  
\usepackage{fancybox} 

\newcommand{\R}{\texttt{R} } % or \textsf{R} or ...  

\pagestyle{fancy} 
\lhead{\textsl{R Programming: Module 1}} 
\rhead{\includegraphics[width=1.8cm]{EDSDLogoLarge.jpg} \textsl{EDSD 2017/18}}



\begin{document}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE, Sweave2knitr("Introduction.Rnw")}
% Rscript -e "library(knitr); knit('./filename.Rnw')"
% pdflatex filename.tex
%<<setup, include=FALSE, cache=FALSE>>=
%library(knitr)
%# set global chunk options
%#opts_chunk$set(fig.path='figure/EDSD140mod1-', 
%#               cache.path='cache/EDSD140mod1-',
%#               fig.align='center',
%#               fig.show='hold', 
%#               fig.width=4, fig.height=4)
%options(replace.assign=TRUE, width=50, scipen = 50, digits = 4)
%my_pdf = function(file, width, height) {
%  pdf(file, width = width, height = height, pointsize = 8)
%}
%@




\title{\small{$\,$}\\
  \large{\textit{\R Programming for Demographers}} \\ $\,$ \\
       \Huge{Basic R}}
\author{Tim Riffe\footnote{First, a big thanks to Giancarlo Camarda, who has let me recycle
his impeccable material for teaching this course. Higher order thanks are also
due to the very same people that Giancarlo himself thanked, especially Sabine
Zinn and Roland Rau. Sabine was my teacher in this very course in 2009 (cohort 5)!
Part of these lectures has been freely inspired by courses that both Roland,
Sabine, and Giancarlo taught in the past. Furthermore, in recent years,
Adam Lenart, Fernando Colchero, and Silvia Rizzi have aided in teaching this
course and improving handouts. On the other hand, it goes without saying that I
am uniquely responsible for any deficiencies and mistakes you may find in
handouts.}}

\maketitle
\thispagestyle{fancy}
\tableofcontents

%%% ------------------------------------------------------- %%%
%%% ------------------------------------------------------- %%%
\section{Statistical Programming}

\subsection*{Requirements and Aims:}
\begin{itemize}
    \item In advance: no programming experience or advanced
      statistical knowledge is needed 
    \item Afterward: feeling comfortable with simple statistical
      programming 
\end{itemize}

\subsection*{What is Statistical Programming?}

In general statistical programming involves controlling computers,
telling them what calculations to do, what to display and doing
computations to aid in statistical analysis. Practically it is the
contrary of a ``click-and-tick'' software, and you are supposed to know
what you are going to do.  

\begin{itemize}
\item More in detail:\\
  - summarizing and displaying data\\
  - fitting models to the data\\
  - displaying results
\item Advanced:\\
  - implementation of (sophisticated) statistical methods\\
  - simulation of stochastic models (the real world is full of randomness) 
\item Statistical programming is closely related to numerical
  programming. It involves\\ 
  - (complex) computations that have to be done numerically\\
  - optimization\\
  - approximation of mathematical functions
\end{itemize}

\subsection{Why R?}

There are a number of different statistical software tools you can use
for statistical computing (Microsoft EXCEL, SAS, SPSS, S-Plus, Stata,
MATLAB, R, etc.). Statistical programming can be performed by
most of these. 

The following questions may hence arise:
\begin{itemize}
\item How much time does it take install and use a software tool?  
\item How is the user interface?
\item What kind of methods and functions are used within a software
  tool? 
\item How are these methods and functions are implemented?
\item Are implemented methods modifiable?
\item Does a software tool offer the option to implement your own methods
  and functions (easily)?
\item $\cdots$
\item How much does it cost?
\item How widely used is the software? Does it have a user community?
\end{itemize}

What exactly is R? Why is \R useful for us?
\begin{itemize}
\item \R is a statistical software tool that allows for
  statistical programming within a wide range of applications. 
\item \R provides a broad spectrum of statistical and
  graphical techniques in a large number of packages.  
\item With \R it is possible to program your own methods for
  individual jobs, or for widespread sharing.  
\item It is also possible to integrate already implemented statistical
  methods in own programs.  
\item \R is open source software, which means that it is
  software whose source code is available under a license
  that permits users to use, change, and improve the software, and to
  redistribute it in modified or unmodified form. You can download
  \R from \texttt{http://www.r-project.org/}.  
\end{itemize}

\R is a command-driven software tool, so you type in
text and ask \R to execute it. Nowadays most statistical
software tools provide an interactive graphical user interface with
menus, etc. So, is \R an old-fashioned tool? No, it is
not. Here are some reasons. 

\begin{itemize} 
\item Menu-based software tools are very convenient when only a
  limited set of commands should be executed. A command-line software
  tool is instead open ended.
\item It is rather simple to write some pieces of code for a new
  problem nobody has faced before and execute them within
  \R. (This is also possible with some menu-driven
  software tools. However, it is much easier in a command-driven
  tool.) 
\item Command-line software tools allow the user to be more
  independent from any particular organization structure of a
  tool.
\end{itemize}


%%% ------------------------------------------------------- %%%
%%% ------------------------------------------------------- %%%
\section{Basic operations and assignment}

The simplest use of \R is as a calculator. Once you
open the program, you can type a simple calculation next to the
greater-than symbol \verb">" in the console. The result is given upon pressing the
\textbf{Enter} key: 
<<>>=
5+4
@ 

You can see that \R provides the outcomes just in the next
line. The number in square-brackets \verb"[1]" indicates that this
is the first result from the command. For longer outcomes, each line
of results will be labeled accordingly to aid the user in scanning
quickly though the output.

Though not particularly common in \R programming, multiple
calculations could be arranged within the same line by separating them
with a semi-colon: 
<<>>=
4*8 ; 21/6 ; 5^3
@ 

It is intuitive that \verb"+" stands for a sum, \verb"*" is
the symbol for multiplication, \verb"^" is the power operator, etc. 

Basic operators as well as more complex functions are available. For
instance we can compute modular arithmetic. For instance, a
life-time of 6000 days is equal to
<<>>=
6000%/%365 ; 6000%%365
@ 
i.e.~\Sexpr{6000%/%365} years and \Sexpr{6000%%365} days. 
First we take the integer division between 6000 and 365,
assuming that a year is always 365 days long. Then
we compute  the remainder after division: 6000 (mod 365).  


Of course we cannot write all our ideas in a single line. \R
has a workspace that can be used to store the results of calculations,
and many other kinds of objects. As a first example, suppose we aim to
store the result of a basic demographic concept: the arithmetic
growth rate. We take the population in Sweden on January, 1st 2000
which was of 8860859 and, assuming an arithmetic increase of
5.3 \textperthousand~per year for ten years, we compute the Swedish population
on January, 1st 2010. Data for this example are taken from the \cite{HMD}.

If we assume a uniform arithmetic (a.k.a. geometric) increase, the population at time $T$,
denoted by $N_{T}$, is given by 
$$
N_{T} = N_{0} (1 + r)^T
$$
where $N_{0}$ is the population at the beginning of the period.

We start ``translating'' $N_{0}$ in \R:
<<>>=
N0 <- 8860859
@ 

In this command, we have assigned a certain number to an \R
object named \texttt{N0} by an arrow that points to
the left: the combination of the left-than sign (\verb"<") with the hyphen
(\verb"-"). Did you notice that no result was returned in the following lines. We have just made an assignment without
asking to show/print us the result. If we want to see it just type:
<<>>=
N0
@ 
Remember that the name of an \R object cannot start with numbers,
and it is always a good habit to choose sensible and meaningful names.
Moreover if we write something else using the same name
(e.g.~\texttt{N0}), the previous object will be automatically
overwritten. 

Let's now compute the population in 2010:
<<>>=
# Swedish population in 2010
# assuming arithmetic growth rate
r <- 5.3/1000
T <- 10
NT <- N0 * (1 + r)^T
NT
@ 
For the record, Swedish population in 2010 was equal to 9340560: the
error is only of
<<>>=
NT - 9340560
@ 
persons.

Perhaps you have noticed that everything that follows the \verb"#"
sign is assumed to be a comment and is ignored by
\R. Note that \R is case-sensitive, that means:
<<error=TRUE, message=TRUE, warning=TRUE>>=
Nt
@ 

are not recognized and produce errors. 
<<echo=FALSE>>=
rm(my_pdf)
@ 

Sometimes we want to know the objects in the
workspace or to remove them. These operations can be done in the
following way:  
<<>>=
# list of the object
ls()
# remove N0
rm(N0)
# list of the objects, without N0
ls()
@ 


%%% ------------------------------------------------------- %%%
%%% ------------------------------------------------------- %%%
\section{Using an Editor}

When you write a program, it normally does not consist of only
one or two lines. Therefore it is a good idea to write the code of
the program in a text editor and then run the whole code or parts of
it in \R. We suggest to use \texttt{R Studio}, which is free, and can be downloaded from  
\url{rstudio.org}, respectively. A
good alternative might be \texttt{Emacs} or \texttt{Eclipse}
(\url{gnu.org/software/emacs}, \url{www.eclipse.org}), which are particularly
flexible and useful for all programming and document markup languages, but it
takes some time to really learn them

\texttt{R Studio} is pretty user-friendly,
and learning about all its features goes beyond the scope of these lectures. Nevertheless,
before we continue with the next sections, take some minutes to get acquainted of your selected editor while typing and compiling
the previous code snippets.


%%% ------------------------------------------------------- %%%
%%% ------------------------------------------------------- %%%
\section{The user friendly \R}

\subsection{Functions}

Most of the work in \R is done through functions. There are
many functions already implemented, but we can also code our own
functions (see Module 4). Just as an introduction we will try three simple
functions: \texttt{c()}, \texttt{sum()} and
\texttt{mean()}. The parenthesis surround the argument list. 

The function \verb"c()" combines values into a vector. For instance:
<<>>=
my.vec <- c(1,2,3,4,5,6,7,8,9,10)
my.vec
@ 
In this case the arguments of the function \verb"c()" are a series of
numbers separated by commas. The resulting vector is assigned to the
object \verb"my.vec". We can calculate the mean of such vector manually:
<<>>=
(1+2+3+4+5+6+7+8+9+10)/10
@ 

Alternatively we could first sum them up and then divide by 10:
<<>>=
sum.vec <- sum(my.vec)
sum.vec/10
@ 

Obviously \R provides a function for computing the arithmetic mean of
a vector, namely \verb"mean()":
<<>>=
my.mean <- mean(my.vec)
my.mean
@ 
In this last case we assign the outcomes to the object \verb"my.mean".

In the remainder of these materials, elementary functions will often be
introduced without formal presentation. The next section shows what
to do when these functions are not completely intuitive in their
usage.  

\subsection{Getting Help}

This material can not cover all aspects of \R. However,
\R is very user friendly and provides an extensive and
detailed help documentation. 
For different problems there are different ways to
get the help.
\begin{itemize}
\item If information you want information on a function whose name you know, the command \verb"help(function_name)" is
  used. Alternatively the command \verb"?function_name" can be typed
  in. For example, just ask for the documentation on the function \verb"mean":
<<eval=FALSE, cache=TRUE>>=
?mean
@ 
\item If only a keyword is known and not a respective function, it is
  possible to search across all functions using the command
  \verb"help.search("keyword")". If we do not know the function for
  computing the mean value we just type:
<<eval=FALSE, cache=TRUE>>=
help.search("mean value")
@ 
\item There is also the possibility to use simply the menu item
  \ovalbox{help} which is provided in \R or R Studio.
\end{itemize}

Sometimes the most interesting part of the function help is
the one related to the examples. A useful way of looking directly at
this section is the function \texttt{example()}:
<<eval=FALSE, cache=TRUE>>=
example(mean)
@ 

An alternatively way would be to go at the end of the documentation
file and run each line of the example by your own.

\subsection{The Package System}

\R consists of a lot of packages written for specific purposes. These packages contain
fundamental statistical functions (\texttt{stats}), demographic
functions (\texttt{demography}), biodemographical functions
(\texttt{Biodem}), etc. 

A few packages are automatically loaded on the start up of \R,
e.g.~the packages \texttt{base} and \texttt{stats}. All
\R-packages are downloadable from the \R web-page by typing 
<<eval=FALSE, cache=TRUE>>=
install.packages("package_name")
@ 
and selecting your (nearest) \texttt{CRAN} mirror. You need to be connected to the Internet to install packages in this way.

If installed, a package can be loaded in \R by the command:
<<eval=FALSE, cache=TRUE>>=
library(package_name)
@ 
R Studio also has functionality for finding and loading packages.


A loaded package is only available during a current session and
must be re-loaded in the next session. Information about a package and
its internal functions can be obtained using the command:
<<eval=FALSE, cache=TRUE>>=
library(help=package_name)
@ 



%%% ------------------------------------------------------- %%%
%%% ------------------------------------------------------- %%%
\section{Data Handling}

The main task of any statistical software tool is the analysis of
data. In this section we explain how to read data into \R and how to store the
results of the analysis (or again data).

Often it is useful to check in which directory \R is open in order to
possibly change it and look at the current list of files in it.
The commands to know the current working directory and the
associated list of files and/or sub-directories are given by
<<eval=FALSE, cache=TRUE>>=
getwd()
dir()
@ 

We can eventually change the working directory to a specific one on
our machine: 
<<eval=FALSE, cache=TRUE>>=
setwd("~/WORK/data/") # for a Linux OS
setwd("C:\\WORK\\data\\") # for a Windows OS
@ 

In \R pure text data can be read in using the function
\verb"read.table()". It reads the specified file and transforms it
into a specific data format, a \verb"data.frame" (see Module 2). The
following arguments are often used for this function:
\begin{itemize}
\item The only required argument in any case is the file name with the
  directory where the file can be found (unless the session is open in
  the folder where the data are saved). 
\item The argument \texttt{header} is a logical variable indicating
  whether variable names are included in the top of each column or
  not. 
\item The argument \texttt{sep} specifies which delimiter has been
  used to separate the columns. If the text file is comma
  separated we type in \texttt{sep=","}. If a space has been used for
  separation we write \texttt{sep=" "}. If a file is tab-separated we enter
  \texttt{sep="\t"} (which is the default value). 
\item If leading lines of data should be skipped we use the argument
  \texttt{skip}.
\item The argument \texttt{nrows} specifies the maximum number of rows
  to read in. 
\end{itemize}

As an example we read a dataset which contains the mid-year population and
number of deaths in Sweden and Kazakhstan by age-groups for females in 1992
\citep[p. 22]{preston2001demography}. The variables are: 
\begin{itemize}
\item \texttt{pop.swe}: mid-year population of Sweden
\item \texttt{dea.swe}: deaths during the year for Sweden
\item \texttt{pop.kaz}: mid-year population of Kazakhstan
\item \texttt{dea.kaz}: deaths during the year for Kazakhstan
\end{itemize}

In \R we read these data as follows:
<<>>=
SweKaz <- read.table(file="swed_kaza.txt", header=TRUE, sep="\t")
@ 

We may inspect the data using the function \texttt{head()}, which presents
the first six data rows. 
<<>>=
head(SweKaz)
@ 

For a more general overview of the data we can type:
<<eval=FALSE, cache=TRUE>>=
fix(SweKaz)
@ 

This function will open a pseudo-spreadsheet which is best to close
before continuing with our work. R Studio also has an editable view tab that lets you examine data in a spreadsheet layout. In general, it is best to not use these options to edit data, but rather just to view them.

\R also provides functions to read in other data formats
as \texttt{*.txt}. In Table~\ref{tab:formatsfunctions} common data
formats and the corresponding function are displayed.

\begin{table*}[h]
    \centering
    \begin{tabular}{c|l|l|c}
            Program & Format & \R Function & Package \\\hline\hline
             & *.txt & read.table() & base\\
            EXCEL & *.csv & read.csv() & base\\
            SPSS & *.sav & read.spss() & foreign\\
            Stata & *.dta & read.dta() & foreign
    \end{tabular}
    \caption{Functions to read in data}
    \label{tab:formatsfunctions}
\end{table*}

The standard function in \R to export data is
\texttt{write.table()}. For example we store the data-object
\texttt{SweKaz} including the variable names. We separate the
columns using tabs (default value). 
<<eval=FALSE>>=
write.table(x=SweKaz, file="MyData.txt", col.names=TRUE)
@ 

You can check the presence on your directory of the exported object
\texttt{MyData} by typing \texttt{dir()}. 

When you close \R all the created objects will not be
automatically saved. Nevertheless, all your code should be preserved in
\texttt{.R}-files by the editor. You would only need to run the scripts again
the to obtain the previous objects. This can be done by:
<<eval=FALSE, cache=TRUE>>=
source("MyScript.R")
@ 

Rarely, you may need to save the workspace. Based on our experience,
this is principally useful when time consuming calculations have been
run. In \R you need to type:
<<eval=FALSE, cache=TRUE>>=
save.image("FirstExerciseR.RData")
@ 
And to retrieve the session \texttt{FirstExerciseR.RData}:
<<eval=FALSE, cache=TRUE>>=
load("FirstExerciseR.RData")
@ 

R Studio does this pretty much automatically unless you opt out on closing the session.


\section{Data types}

\R has a wide range of data types. The basic ones are the following: 
\begin{itemize}
\item numeric
\item character
\item logical
\item factor
\item date and times
\item complex
\end{itemize}

An example of a numeric object is given by \texttt{my.vec}. We can
ask for the storage mode of the object by 
<<>>=
mode(my.vec)
@ 

Vectors as well as scalars can be also made up of strings instead of
numbers. We simply have to enclose the
characters/strings by quotation marks like in the following example:
<<>>=
country <- c("Japan", "USA", "France")
country
mode(country)
@

In many situations, a sequence of strings masks realizations from
categorical variables such as religion, political party and blood
type. \R offers an efficient way to store these sequences as factors:
<<>>=
blood <- c("A", "B", "O", "AB", "A", "B", "O", "O", "AB", "B")
blood <- factor(blood)
blood
@ 
In the first line we list the blood type of 10 observations, then we
force the vector of characters to be factor and then we print it. 
Note that \R recognizes that \texttt{blood} is made up of a limited
number of possible values. To query them and their number:
<<>>=
levels(blood)
nlevels(blood)
@ 
Factors are internally stored as integers (another storage mode of the
object) implying lower memory usage than alternatives. Moreover factors
will be important when we later run statistical models (see Module 8). 
If factor levels are assumed to be ordered, the internal argument
\texttt{ordered} must be set to \texttt{TRUE}:
<<>>=
educ <- c("Prim", "Ter", "Sec", "Sec", "Ter", "Prim")
educ <- factor(educ, ordered=TRUE)
educ
@ 

When strings are provided, \R orders the factor levels alphabetically. 

Missing values are often present in demographic datasets. In \R such
instance is coded with the symbol \texttt{NA} (Not-Available) and it can
lead to misleading outcomes when operators are applied:
<<>>=
my.na <- c(1,2,3,4,NA,6,7,NA,NA,10)
my.na
mean(my.na)
@ 
There are various ways to omit missing cases, and they depend on the analysis undertaken. 

Other special cases are undefined values, which are
represented by \texttt{NaN} (Not-a-Number) and infinite values
(\texttt{Inf}):  
<<>>=
0/0
1/0
-1/0
@ 

Vectors made up of logical values (\texttt{TRUE}/\texttt{FALSE}) 
are also possible in \R: 
<<>>=
my.log <- c(TRUE, FALSE, TRUE, FALSE, FALSE)
my.log
mode(my.log)
@ 
Also in case of logical values, \R efficiently stores them as 0/1
values. Note that both summation and mean of a logical vector are feasible as well
as sensible operations:
<<>>=
sum(my.log)
mean(my.log)
@ 
These results tells us that in \texttt{my.log} we have two values
equal to \texttt{TRUE} which represents 40\% of the total number of
elements. Logical values can be very useful for selection, as we will see later.

Logical values are also results of relational operators. We can test
some of these operators on the mean value of \texttt{my.vec} as follows:
<<>>=
my.mean > 5.5  # test my.mean greater than 5.5
my.mean <= 5.5 # test my.mean smaller than or equal to 5.5
my.mean == 5.5 # test my.mean exactly equal to 5.5
my.mean != 5.5 # test my.mean not equal to 5.5
@ 
Other relational operators with intuitive meanings are \verb">=" and
\verb"<". These operators can be also vectorized to test element-wise relations.
For example we can test which values of \texttt{my.vec} are greater
than its own mean (\texttt{my.mean}):
<<>>=
my.vec > my.mean
@ 

Multiple relational operators can be useful. Here we test which
elements of \texttt{my.vec} are equal to either 1,3,7 or 9:
<<>>=
my.vec%in%c(1,3,7,9)
@ 
or different from the mentioned values:
<<>>=
!my.vec%in%c(1,3,7,9)
@ 
Here we use the command \verb"!" which indicates logical negation,
i.e. we swap \texttt{TRUE} and \texttt{FALSE} from the previous
command line.

An additional relational operator can be used to detect missing cases
within an object:
<<>>=
is.na(my.na)
@ 

\R provides several options for dealing with date and time data. The
function \texttt{as.Date()} can be used for converting strings and
objects of class \texttt{Date} representing calendar dates. For
instance, we can assign to two objects dates of birth and death of a
given individual: 
<<>>=
birth <- as.Date('1961-7-31')
death <- as.Date('1989/11/9')
birth
death
@ 
The default format is a four digit year, followed by a month, then a
day, separated by either dashes or slashes. Moreover, despite the
print version resembles strings objects, \R recognizes them as dates
and numerical functions are feasible:
<<>>>=
life <- death-birth
life
@ 
and tells that life-time of this observation was \Sexpr{life} days. 

For the mathematically oriented readers, we inform that complex
numbers can also be handled within \R. A small instance is given
here in which we assign to \texttt{z} the complex number $3 +2i$ where
$i=\sqrt{-1}$: 
<<>>=
z <- 3+2i
z
@ 
We can take the complex conjugate of \texttt{z} ($3 -2i$) and extract its real
or complex parts as follows:
<<>>=
Conj(z)
Re(z)
Im(z)
@ 
These items can be particularly helpful in demography when working with projection matrices, for instance.

It is noteworthy to remember that if different data types are included
within a vector containing strings, all elements will be coerced to
character strings: 
<<>>=
my.mix <- c("Japan", "USA", 20, TRUE, z)
my.mix
@ 



% \clearpage
\section{Exercises}

\subsection*{Exercise 1}
Solve the following problems using your editor and \R:
\begin{itemize}
\item[(i)]      $2+3*\left(4+5*\left(6+7*\left(8+9\right)\right)\right)$
\item[(ii)]     $1e\!+\!07 * 4^3$
\item[(iii)]    $log_e\left(2\right)$
\item[(iv)]     $log_{10}\left(2\right)$
\item[(v)]      $\sqrt{333}$.
\end{itemize}

\subsection*{Exercise 2}
Compute
\begin{equation*}
  \frac{1335}{4}y^6 + x^2(11x^2y^2-y^6-121y^4-2)+\frac{11}{2}y^8
\end{equation*}
where $x=0.2$ and $y=3.5$. 

\subsection*{Exercise 3}

Read in the first 10 rows of the dataset \texttt{GDPe02012.txt}. 

\subsection*{Exercise 4}

Create a vector for 10 observations and 3 religions. It is up to you
the types of religions and their order.

Then, search for and apply a function, which informs you about the number of
observations in each category (i.e. build a contingency table of the
object). 


\subsection*{Exercise 5}

The \nth{20} Century experienced two World Wars. The first started on
28 July, 1914 and lasted until 11 November, 1918. The Second World War
started with the invasion of Poland on September 1, 1939 and the final
armistice was signed on 14 August, 1945.  

Compute the length of these two important conflicts, test which one
has lasted longer and how many days more.


\subsection*{Exercise 6}

Show in \R that:
$$
z^\star \cdot z = | z |^2
$$
where $z^\star$ is the complex conjugate of the complex number
$z=4+3i$. Note that a simple logical operator is not sufficient here:
just print the outcomes of the right- and left-end-side of the equation.


\bibliographystyle{chicago}
\bibliography{bibliography}


\end{document}









































\section{Vectors}

This section would have been better included in the next module,
anyway it can be an introduction for that. Let's talk about vectors,
the basic building blocks in \R.

In general a vector consists of components of the same data type. For
example, a numeric vector is a list of numbers. There are several ways
to construct a numeric vector. We have seen that the function
\texttt{c()} can be used to collect things together into a vector:
<<>>=
a <- c(1,2,3,4,5)
b <- c(6,7,8,9,10)
@ 

We can also join the two vectors/objects \texttt{a} and \texttt{b}
using again \texttt{c()}:
<<>>=
ab <- c(a,b)
ab
@ 

Of course we will obtain something different if we change the order:
<<>>=
ba <- c(b,a)
ba
@ 

A often required vector is a vector consisting of a regular sequence
of numbers. It is possible to construct such a vector by using the
operator \texttt{:} or the \texttt{seq}-command. See next examples:
<<>>=
1:10
10:1
seq(from=1, to=10, by=1)
seq(1, 10, 2)
seq(from=10, to=1, by=-3)
seq(1, 5, 0.5)
@
It's clear that the first option is faster, whether the second offers
more opportunities. See also how we can skip the names of the
arguments as long as we use them in the right order.

Beside sequences, repetitions are often used. \R provides here
the \texttt{rep(x, times)} function, which repeats the value
\texttt{x} as often as indicated by the integer \texttt{times}. In the
next examples we also show how functions can be used simultaneously:
<<>>=
rep(1,5)
rep(c(1,2,3), 2)
rep(seq(4,1,-1), 3)
rep(1:3, 1:3)
@ 

In the last example each value in the first argument was repeated the
associated value in the second argument.

We can extract elements from vectors using square brackets. For a
single element:
<<>>=
x <- c(seq(1,10,2), seq(5,15,2), 100:95)
x
x[11]
@ 

Of course several elements can be extracted too:
<<>>=
x[c(2,5,9,11)]
x[5:9]
@ 

More selective choice can also be done. Here we take all the elements
of \texttt{x} which are bigger than 50:
<<>>=
x[x > 50]
@ 
Here \R chooses those components of the vector \texttt{x} for which the
condition \texttt{component > 50} is \texttt{TRUE}:
<<>>=
x > 50
@ 
The sign \texttt{>} obviously stands for bigger-than. Likewise
\texttt{<} means smaller-than. We can have bigger-or-equal-than using
\texttt{>=}. The double equality sign (\texttt{==}) is the sign for comparing for equality.
The sign \texttt{!=} is the sign for comparing for inequality. As example:
<<>>=
x==15
x!=5
@ 

Negative indices can be used to avoid certain elements. For example,
we can select all but the second element of \texttt{x} as follows:
<<>>=
x[-2]
@ 

The fifth through eleventh elements of \texttt{x} can be skipped as
follows: 
<<>>=
x[-(5:11)]
@ 

Arithmetic can be done on \R vectors. For example, we can
simply multiply all elements of \texttt{x} by 3, element wise:
<<>>=
x * 3
@ 

or adding 7 to each element too:
<<>>=
x+7
@ 

The above examples show how binary arithmetic operator can be used
with vectors and constants. In general, the binary operators also work
element wise when applied to pairs of vectors. For example, we can
compute $y_{i}^{x_{i}}$ for $i=1,2,3$, i.e.~$(y_{1}^{x_{1}},
y_{2}^{x_{2}}, y_{3}^{x_{3}})$, as follows with newly created vectors:
<<>>=
y <- 5:7
x <- 2:4
y^x
@ 
which is equivalently to:
<<>>=
c(5^2, 6^3, 7^4)
@ 

Particular attention is needed when the length of the two vectors differ.

Besides numeric data, \R allows also to use vectors which consist of characters
or strings. We simply have to enclose the characters/strings by quotation
marks like in the following example:
<<>>=
simpsons <- c("Marge", "Homer", "Bart", "Lisa", "Maggie")
simpsons
@ 

The function \texttt{rep} can be also applied to
character vectors:
<<>>=
rep("Marge", 4)
@ 

Note that when you have both numbers and characters, the former are
converted to characters:
<<>>=
c("Marge", 2, "Homer", 5)
@ 

\R is a programming environment which has mainly been
developed for statistical problems and applications. Therefore there
is an instrument to deal with categorical data, like sex, religion,
etc. Such data can be presented by using the factor-command.
<<>>=
sex <- factor(c(1,2,2,1,2,1,1,2))
sex
@ 
The last line \texttt{Levels: 1 2} tells you that \R is not
considering the series of \texttt{1} and \texttt{2} as numbers. Instead it has in its
memory that they represent realizations from two possible
categories, i.e.~it doesn't make any sense to numerically operate with
\texttt{1} and \texttt{2} for what they represent here. This distinction will be important when we will run
statistical models (see Module 6).

The following example is a little bit more challenging, but it is the
last for today. Given the object \texttt{sex} and a new vector \texttt{age} associated at each
element of the first vector, we aim to compute
the mean of \texttt{age}, only for \texttt{sex==1}:
<<>>=
age <- c(20,34,56,33,78,35,12,92)
age1 <- age[sex==1]
mean(age1)
@                               


