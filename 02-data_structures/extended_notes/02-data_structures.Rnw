\documentclass{article}

\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage{placeins}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}


\usepackage[a4paper,
            left=2.3cm,
            right=2.3cm,
            bottom=2.3cm,
            top=2.8cm,
            footskip=32pt]{geometry}   
\usepackage{graphicx}
\usepackage{fancyhdr}
\usepackage{rotating}
\usepackage[sort]{natbib} 
\usepackage{amsmath, amssymb, bm}  
\usepackage{fancybox} 
\usepackage{tabularx}
\newcommand{\R}{\texttt{R} } 

\pagestyle{fancy} 
\lhead{\textsl{R Programming: Module 2}} 
\rhead{\includegraphics[width=1.8cm]{EDSDLogoLarge.jpg} \textsl{EDSD 2017/18}}


\begin{document}
% Rscript -e "library(knitr); knit('./filename.Rnw')"
% pdflatex filename.tex
%<<setup, include=FALSE, cache=FALSE>>=
%library(knitr)
%# set global chunk options
%opts_chunk$set(fig.path='figure/EDSD140mod2-', 
%               cache.path='cache/EDSD140mod2-',
%               fig.align='center',
%               fig.show='hold', 
%               fig.width=4, fig.height=4)
%options(replace.assign=TRUE, width=85, scipen = 50, digits = 4)
%my_pdf = function(file, width, height) {
%  pdf(file, width = width, height = height, pointsize = 8)
%}
%@




\title{\small{$\,$}\\
  \large{\textit{R Programming for Demographers}} \\ $\,$ \\
       \Huge{Data Structures}}
\author{Tim Riffe\footnote{First, a big thanks to Giancarlo Camarda, who has let me recycle
his impeccable material for teaching this course. Higher order thanks are also
due to the very same people that Giancarlo himself thanked, especially Sabine
Zinn and Roland Rau. Sabine was my teacher in this very course in 2009 (cohort 5)!
Part of these lectures has been freely inspired by courses that both Roland,
Sabine, and Giancarlo taught in the past. Furthermore, in recent years,
Adam Lenart, Fernando Colchero, and Silvia Rizzi have aided in teaching this
course and improving handouts. On the other hand, it goes without saying that I
am uniquely responsible for any deficiencies and mistakes you may find in
handouts.}}

\maketitle
\thispagestyle{fancy}
\tableofcontents



\section{Introduction}

\R offers several possibilities to store data in specific kinds of objects. The
most important, and the ones we will use later, are:
\begin{itemize}
\item vector 
\item matrix and array
\item data frame
\item list
\end{itemize}

We will leave other objects to you as exercises, as appropriate.

\section{Vectors}

Vectors are the basic building blocks in \R. As we saw in Module 1, a vector consists of a set of elements of the
same data type.
For example, a numeric vector is a set of numbers. There are several ways
to construct a numeric vector. We have seen that the function
\texttt{c()} can be used to collect elements together into a vector:
<<>>=
a <- c(1, 2, 3, 4, 5)
b <- c(6, 7, 8, 9, 10)
@ 

We can also join the two vectors/objects \texttt{a} and \texttt{b}
using \texttt{c()} again:
<<>>=
ab <- c(a, b)
ab
@ 

We obtain a different result if we change the order:
<<>>=
ba <- c(b, a)
ba
@ 

An oft-required vector is a vector consisting of a regular sequence
of numbers. It is possible to construct such a vector by using the
operator \texttt{:} or the \texttt{seq} function. See different options
to build up a sequence of number from 1 to 10 by 1:
<<>>=
1:10
seq(from = 1, to = 10, by = 1)
seq(1, 10, 1)
@

Note how we can skip the names of the arguments as long as we use them
in the right order. It's clear that the first option is faster,
whether the second and third are clearer and more flexible. Next examples present
some capacities of \texttt{seq()}:
<<>>= 
seq(1, 10, 2)
seq(10, 1, -3)
seq(1, 5, 0.5)
seq(1, 10, length = 4)
seq(1, by = 2, length = 5)
@ 
In the last two lines we do not gives the arguments in their default
order, therefore we need to explicitly call them.

Besides sequences, repetitions are often used. \R provides here
the \texttt{rep(x, times)} function, which repeats the value
\texttt{x} as often as indicated by the integer \texttt{times}. In the
next examples we also show how functions can be used simultaneously:
<<>>=
rep(1, 5)
rep(c(1, 2, 3), 2)
rep(seq(4, 1, -1), 3)
rep(1:3, 1:3)
@ 
In the last example each value in the first argument was repeated the
associated value in the second argument.

Likewise \texttt{seq()}, the function \texttt{rep()} offers additional
arguments such as
<<>>=
rep(1:3, each = 3)
rep(1:3, length = 10)
@ 

We can extract elements from vectors using square brackets. Let's take
the 11th elements of the following vector which contains also missing
cases: 
<<>>=
x <- c(seq(1, 10, 2), NA, seq(5, 15, 2), NA, 100:95)
x
x[11]
@ 

Of course several elements can be extracted too using within the
square brackets vectors which specify the needed positions. We can
either internally define the vector of positions:
<<>>=
# take 2nd, 5th and 11th elements of x
x[c(2, 5, 11)] 
@ 
or previously define it:
<<>>=
# take all elements of x between the 5th and 9th positons
pos <- 5:9
x[pos] 
@ 

You can also be more selective. Using the logical operators
presented in Module 1, we take all the elements
of \texttt{x} which are bigger than 50:
<<>>=
x[x > 50]
@ 
Here \R chooses those elements of the vector \texttt{x} for which the
condition \texttt{element > 50} is \texttt{TRUE}:
<<>>=
x > 50
@ 
Other two examples with different relational operators:
<<>>=
x[x == 15]
x[x != 5]
@ 

Note that in this cases, \R extracts also \texttt{NA} elements from the
vector since the logical operator is not able to discriminate
between \texttt{TRUE} and \texttt{FALSE}.

It can be useful to operate with multiple relationships. In the next line
we select all the elements of \texttt{x} which are equal to 1,
5, 7, or 20:
<<>>=
pos1 <- x %in% c(1, 5, 7, 20)
x[pos1]
@ 
Note that obviously \R did not find any element equal to 20, (but you're not
warned), and \texttt{NA} values are not taken into account. 

Negative indices can be used to skip certain elements. For example,
we can select all but the second element of \texttt{x} like this:
<<>>=
x[-2]
@ 

The fifth through eleventh elements of \texttt{x} can be skipped as
follows: 
<<>>=
x[-(5:11)]
@ 
Here do not forget to use parentheses otherwise you would search for
negative positions (try it, see what happens!).

The function \texttt{is.na} presented on Module 1, can be used to
check for missing cases and, applied its results and a logical
negation as index, it can be used to skip \texttt{NA} cases:
<<>>=
x1 <- x[!is.na(x)]
x1
@ 

Arithmetic can be done on \R vectors. For example, we can
simply multiply all elements of \texttt{x1} by 3, elementwise:
<<>>=
x1 * 3
@ 
or add 7 to each element:
<<>>=
x1 + 7
@ 

The above examples show how binary arithmetic operator can be used
with vectors and constants. In general, the binary operators also work
elementwise when applied to pairs of vectors. For example, we aim to compute:
$$
y_{i}^{x_{i}} \qquad \mathrm{for} \quad i=1,2,3 \qquad\Rightarrow\qquad
(y_{1}^{x_{1}},y_{2}^{x_{2}}, y_{3}^{x_{3}}) \, ,
$$
as follows with newly created vectors:
<<>>=
y <- 5:7
x <- 2:4
y^x
@ 
which is equivalent to:
<<>>=
c(y[1]^x[1], y[2]^x[2], y[3]^x[3]) # c(5^2, 6^3, 7^4)
@ 

Particular attention is needed when the lengths of the two vectors
are not equal 

Another example is taken from demography. In the following we present
a way of computing the Crude Death Rates (CDR) for different populations. In
general, for a single year, CDR is defined as
$$
CDR = \frac{D[t,t+1]}{PY[t,t+1]}
$$
where $D[t,t+1]$ are the number of deaths between the start of year $t$ and the start of year $t+1$ (practically, Jan. 1 and Dec. 31 of the same year), and $PY[t,t+1]$
denotes the person-years lived in the same period, which one might
approximate as follows:
$$
PY[t,t+1] = \frac{N(t+1) - N(t)}{\ln\left[ \frac{N(t+1)}{N(t)}\right]}
$$
with $N(t+1)$ and $N(t)$ are the number of persons alive on Jan. 1 and
Dec. 31, respectively. More details in \citet[ch.~1]{preston2001demography}.

Here we compute the CDR for four female populations in 2008. First we create three vectors with
$D[t,t+1]$, $N(t)$ and $N(t+1)$ where t and t+1 are years 2008 and 2009 (both Jan. 1),
for Sweden, USA, France and Japan, respectively: 
<<>>=
D01 <- c(47389, 1245787, 260434, 533696)
N0  <- c(4618852, 153833535, 32048040, 64563312)
N1  <- c(4652510, 155243324, 32217830, 64512583)
@ 
Then we compute the person-years:
<<>>=
PY01 <- (N1 - N0) / log(N1 / N0)
@ 
Note the in \R natural logarithms are computed with function
\texttt{log()}. 

Finally CDR (per thousand) can be calculated for all three populations:
<<>>=
CDR <- D01 / PY01
CDR * 1000
@ 

As we saw in Module 1, \R allows also to use vectors which consist of
characters or strings and, for instance, function \texttt{rep} can also be applied to them 
<<>>=
country <- c("Sweden", "USA", "France", "Japan")
rep(country, 2)
rep(country, each = 2)
@ 

The following example shows the flexibility of \R in operating with
different objects. Given two new objects \texttt{sex} and \texttt{age}
associated each other, we want to compute the mean completed age for a given
sex:  
<<>>=
sex <- factor(c(1, 2, 2, 1, 2, 1, 1, 2))
age <- c(20, 34, 56, 33, 78, 35, 12, 92)
age1 <- age[sex == 1]
mean(age1)
@
The vector \texttt{sex} was defined as factor: although not necessary
for this example, this operation is more natural when dealing with
categorical values.

\section{Matrices and Arrays}

\subsection{Matrices}

Matrices are two-dimensional structures containing rows and columns. A
matrix can be regarded as a collection of vectors of the same length
(i.e. the same number of elements) and of the same data type. There are different ways to construct a matrix. Here, we address only
two possibilities:
\begin{enumerate}
\item using the function \texttt{matrix(data,nrow,ncol)} in which
  \texttt{data} is the element we aim to arrange in a matrix, followed by the number of rows and columns for the matrix.
\item ``gluing'' vectors together. Either one for each column
  (\texttt{cbind}) or for each row (\texttt{rbind}).
\end{enumerate}

Let's give some examples for the first possibility:
<<>>=
M1 <- matrix(1:20, 4, 5)
M1
M2 <- matrix(1:20, 5, 4)
M2
@ 
Note that the order of the arguments is crucial, and see how the
elements are stored internally: down the first column, then down the
second and so on. This is known as column-major storage order. Of
course we could use already-created objects (e.g. vectors) and arrange
them in a matrix:
<<>>=
M3 <- matrix(c(age, sex), 8)
M3
@ 
In this case we did not specify the number of columns: given the
length of \texttt{data}, \R will automatically fill up a
matrix. This automatic behavior could lead to some issues:
<<>>=
M4 <- matrix(c(age, sex), 2)
M4
M5 <- matrix(c(age, sex), 3)
M5
@ 

In \texttt{M4} we arrange our data in two rows, but since we work in a
column-major storage order, the outcome is not an error, but it is also not necessarily
what we would like to have. Then, arranging 16 elements in a 3-row
matrix produces the object (\texttt{M5}), but also a warning message:
the data length (16) is not a sub-multiple or multiple of the number
of rows (3). So \R creates a matrix but when it finishes the
data, it starts recycling them for filling up the matrix. Bear in mind
that, for example, if we fill a $9\times 9$ matrix using
a vector with 27 elements, \R does not produce any warning:
$9\times 9 = 81 = 27*3\,$, i.e. there is no remainder after recycling
$n=3$ times the vector.

The matrix \texttt{M3} can be constructed by gluing/binding together
\texttt{age} and \texttt{sex} by column, but if we aim to have one
observation for each column we can bind \texttt{age} and \texttt{sex} by
row: 
<<>>=
M6 <- cbind(age, sex)
M6
M7 <- rbind(age, sex)
M7
@ 
Note that these functions preserve the names of the vectors to which they
are applied, and this information is preserved in the final matrix as
column/row names.

It is noteworthy to point out that both \texttt{cbind} and
\texttt{rbind} can be used to bind several matrices. Such
matrices must have the same number of columns (rows) when we employ
\texttt{rbind} (\texttt{cbind}).


Having data defined as a matrix facilitates analysis in several
ways. For example, in a regression setting you can enter a matrix of covariates at once
without referring to each single vector/variable. Moreover matrix
algebra and associated population analysis can be 
easily performed with several \R functions (covered in another module). 

Referencing elements in matrices works similar to referencing elements
of vectors. The only thing we have to consider is that matrices
are two-dimensional (in contrast to one-dimensional
vectors). Consequently two indices are needed. Specifically we refer
to an element of a matrix in the following way: 
\verb"matrix[row_index,column_index]". As 
example:
<<>>=
M6[5, 1]
@ 
Always, remember: rows first, columns second! Somewhat confusing, \R also allows a matrix to be indexed as a
vector, using just one value:
<<>>=
M6[12]
@ 
To understand what we have selected remember how \R fills a
matrix by columns. \texttt{M6} is a $(8 \times 2)$ matrix, therefore
the 12th element refers to the 4th element of the second column.  

Whole rows or columns of matrices may be selected by leaving the
corresponding index blank:
<<>>=
M6[3, ]
M6[, 2]
@ 

As with vectors, negative referencing excludes specific
rows/columns:
<<>>=
M1[, -c(3, 5)]
M1[-c(1, 3), ]
@ 

\subsection{Arrays}

Matrices and arrays can be considered special cases of vectors. A matrix is a stored as a vector with an extra attribute, which is its dimension. An array is just the same as a matrix, except it can have more than two dimensions.
 An example of three-dimensional
array could be a collection of data, where death rates are arranged by
period and age (i.e.~Lexis coordinates) for several countries.

Arrays can be constructed with \verb"array(data, dimension_vector)"
function. An example should clarify this approach. 24 uniform random
numbers are arranged into a three-dimensional array with 2 rows, 4
columns and 3 layers:
<<>>=
x <- runif(24)
A <- array(x, c(2,4,3))
A
@ 
\begin{figure}[h!]
  \begin{center}
    \includegraphics[scale=0.5]{figarray.pdf}
    \caption{Schematic representation of an array.}\label{fig:array}
  \end{center}
\end{figure}


While matrices need two indices to reference elements, arrays need as many
indices as there are dimensions. Figure \ref{fig:array} gives a
schematic example of the array \texttt{A}, with three
dimensions. The first index refers to the row, the second to the column and the third to the
layer of the array. For instance, the ``upper-right'' element on the second
``layer'' could be referenced as follows:
<<>>=
A[1,4,2]
@

\section{Data frame}

Data frames represent data in a two-dimensional way like
matrices. They are the closest representation of data in \R as
you may be familiar with from spreadsheets or from software like \texttt{SPSS} or \texttt{STATA}. That means that one
row typically represents the values of several variables for one
individual/unit. In addition, it is also possible to assign names to
each row, and to have different data type for each variable/column. See
the following example: 
<<>>=
DataMort <- data.frame(country=country, PY=PY01, CDR=CDR)
DataMort
@ 

The command \texttt{merge} joins two data frames by common columns,
also with different order, but with exact name. Here we add to the
previous dataframe, values of life expectancy and the infant mortality rate: 
<<>>=
country1 <- c("USA", "Japan", "Sweden", "France")
e0 <- c(80.69, 86.04, 83.12, 84.36)
m0 <- c(0.0062, 0.0025, 0.0025, 0.0034)
DataMort.extra <- data.frame(country=country1, e0=e0, IMR=m0)
DataMort.extra
DataMort1 <- merge(DataMort, DataMort.extra, by = "country")
DataMort1
@ 
Data are alphabetically reordered based on the variable given to the argument \texttt{by}.

Referencing vectors and elements of a data frame works analogously to
referencing vectors and elements in a matrix: 
<<>>=
DataMort1[-2,]
DataMort1[2,3]
@ 
There are also other ways to reference columns. Using the \verb"$" sign or
the brackets \verb"[[ ]]", variables can be selected:
<<>>=
DataMort1$PY 
DataMort1[[2]]
DataMort1[["PY"]]  
DataMort1[, 2]
DataMort1[, "PY"]
@ 
The selection of rows in a data frame can be done by using brackets and a
condition:
<<>>=
DataMort1[DataMort1$e0 > 84, ]
@ 

Another possiblity to select values in a data frame is to use the command
\texttt{subset}. Let's select all the countries with CDR
greater then 0.009 \textperthousand:
<<>>=
subset(DataMort1, CDR > 0.009)
@ 
We can also use multiple selection taking only a specific
variable. For instance, we take the infant mortality rates for all the
countries with life expectancy greater than 83 and CDR smaller then
0.01\textperthousand: 
<<>>=
subset(DataMort1, (e0 > 83) & (CDR < 0.01) , IMR)
@ 
Note that logical expressions can be combined by using the logical
operators \verb"&" (logical ``and'') and \verb"|" (logical
``or''). 

If you are not sure what the variable names of your data frame are, you
can simply ask for them:
<<>>=
names(DataMort1)
@ 

Or for more complete information, try:
<<>>=
str(DataMort1)
@
This is actually valid for any and all objects, but it's useful for \texttt{data.frame} objects because you might not know ahead of time what the column classes are.
\section{Lists}

The most flexible way to store values/data in \R is a list. It
does not put any restrictions on length or type of the
data. The elements of a list can be vectors, matrices, data frames, other
lists, and anything else in general. If you want to collect all relevant information of one entity
in one object the construction of a list is useful.\footnote{It turns out that \texttt{data.frame} objects are stored as lists where each element is of the same length, such that it can be treated in a tabular way.}

Let's continue with the demographic example previously presented. We
include in the same list mortality data from the dataframe
\texttt{DataMort1}, we collect in matrix Total Fertility Rates and
Mean Age at Childbearing for the same countries (source:
\citet{HFD}), we specify the data source  with a string, and we set
the reference date for all these data. 
<<>>=
TFR <- c(1.991, 1.360, 1.917, 2.074)
MAC <- c(29.89, 30.31, 30.58, 28.02)
DataFert <- rbind(TFR, MAC)
Source <- "Human Mortality and adn Human Fertility Databases"
date <- as.Date("2008/06/30")
DemoList <- list(mortality = DataMort1, 
                 fertility = DataFert,
                 Source = Source,
                 date = date)
DemoList
@ 
The left indentation of the arguments to \texttt{list()}, for example, \verb"fertility =..."
is not compulsory, but it helps to structure your coding more 
tidily.

Referencing elements of a list works analogously to referencing
elements in a data frame:
<<>>=
DemoList$fertility
DemoList$mortality$IMR
DemoList[[4]]
DemoList[["Source"]]
names(DemoList)
@ 

A selection of values in a list can be done using the covered selection methods:
<<>>=
DemoList$fertility[2,3]
subset(DemoList$mortality, DemoList$mortality$e0 > 84)
@ 


%%% -------------------------------------------------------------------- %%%
%%% -------------------------------------------------------------------- %%%
\section{Basic functions}

\subsection{Getting Information about Data}

\R has various built-in functions to extract information about objects. These functions are crucial when we load
external datasets and/or we aim to work with outcomes of internal \R
functions. It is always a good habit to ask beforehand the type of object and its
dimensions for understanding compatibility with other objects.

The length of an object can be obtained by the function
\texttt{length()}. Whereas in case of a vector it returns just the number of
elements of the vector, in conjunction with a
matrix/array gives the total number of elements the matrix/array. The
same function applied to a data frame or a list provides the number
of columns/variables and the number of list elements, respectively.

The dimension of an object can be retrieved via the function
\texttt{dim()}. Whereas for a vector and list the dimension is \texttt{NULL}, we
obtain the number of rows, columns and, possibly, layers for matrices,
dataframes, and arrays.

As we have seen in Module 1, \texttt{mode()} gives the storage mode
of the object. Moreover the function \texttt{class()} shows the data
type of an object. For example the mode for a matrix might be numeric and
its class is matrix itself. 

In order to represent the outcomes of these functions for different \R
objects we have previously built during Module 2, we provide Table
\ref{tab:RequireInfo} in which several examples are simultaneously shown.


\begin{table*}[h]
    \centering
\begin{tabularx}{\textwidth}{ X|X|X|X|X }
  \R object & \texttt{length()} & \texttt{dim()} & \texttt{mode()} & \texttt{class()} \\
  \hline\hline
  \texttt{x}  & \Sexpr{length(x)} & \texttt{NULL} & \Sexpr{mode(x)} & \Sexpr{class(x)}\\
  \texttt{M1} & \Sexpr{length(M1)} & \Sexpr{dim(M1)} & \Sexpr{mode(M1)} & \Sexpr{class(M1)}\\
  \texttt{A} & \Sexpr{length(A)} & \Sexpr{dim(A)} & \Sexpr{mode(A)} & \Sexpr{class(A)}\\
  \texttt{DataMort1} & \Sexpr{length(DataMort1)} & \Sexpr{dim(DataMort1)} & \Sexpr{mode(DataMort1)} & \Sexpr{class(DataMort1)}\\
  \texttt{DemoList} & \Sexpr{length(DemoList)} & \texttt{NULL} & \Sexpr{mode(DemoList)} & \Sexpr{class(DemoList)}
\end{tabularx}
    \caption{Example of functions for requiring information from an \R
      object.}
    \label{tab:RequireInfo}
\end{table*}

Furthermore, remember that if we consider a single element of a list or
dataframe, their storage modes and classes are not necessary the
same:
<<>>=
mode(DemoList)
mode(DemoList$fertility)
@ 

Sometimes a given object needs to be coerced to another, if feasible, 
\R offers several function for converting a specific class to another
one. For example if we have a dataframe (always check using \texttt{class()}), but
we need its element as a matrix:
<<>>=
as.matrix(DataMort)
@ 
Of course in this instance all elements will be coerced to strings
since a matrix (like a vector) must contain elements of the same kind.
Other options for forceing specific classes are: \texttt{as.vector()},
\texttt{as.matrix()}, \texttt{as.data.frame()}, \texttt{as.array()},
\texttt{as.list()}, (in general \texttt{as.newformat()}).

An important function for getting a first glance at an \R
object is \texttt{summary()}. It shows a lot of relevant
information about an object at once. For example, if applied to a vector,
we obtain its median, mean, range and first and third quartile:
<<>>=
summary(CDR)
@ 
The same information are obtained for each column/variable when we ask
for the summary of a dataframe (or a matrix):
<<>>=
summary(DataMort)
@ 
Different outcomes are obtained when the function is applied to a list:
<<>>=
summary(DemoList)
@ 
Compare with the results of \texttt{str()} on the same objects.
\subsection{Sorting data}

Vectors can be sorted by using the function \texttt{sort()}. The
sorting is ascending by default. For
descending, specify \texttt{decreasing = TRUE} in the argument list of the \texttt{sort}-function.
Let's try with the life expectancy:
<<>>=
e0
sort(e0)
sort(e0, decreasing = TRUE)
@ 

The rows of a data frame can be sorted according to one or more variables using \texttt{order()}. This function returns a
permutation which rearranges the original vector in ascending or
descending order (\texttt{decreasing = TRUE}). Let's see what this
means using the object \texttt{e0}:
<<>>=
order(e0)
@ 
The lowest values in \texttt{e0} is the first, then the
third, the fourth, and the second.

The function \texttt{order()} can be used to rearrange the vector
\texttt{e0} according to \texttt{order(ages)} resulting to a sorted
vector:
<<>>=
e0[order(e0)]
@ 

Using this property we are able to sort a data frame according to one
variable as follows:
<<>>=
DataMort1[order(DataMort1$e0),]
@ 

If there are more than one variables after which a data frame should
be ordered, the sorting procedure can be realized like in the
following example. First we construct a new dataframe:
<<>>=
weight <- c(100,120,100,120,120,80,100,120,100,100)
height <- c(178,165,174,173,185,196,195,170,170,177)
sex <- c(1,1,2,2,1,1,1,2,2,1)
DF <- as.data.frame(cbind(height, weight, sex))
DF
@ 
Now we sort the data frame first by sex and then by weight (within sex):
<<>>=
DF[order(DF$sex, DF$weight),]
@ 

Note that our final output presents all the observations where
\texttt{sex} equals to 1, and within these, observations are sorted
according to their weight in ascending order.


\subsection{Other important functions}

Often we have a dataframe (always check using \texttt{class()}), but
we need its element as a matrix. In \texttt{R} we can convert/force a
specific class to another using the following functions:
\texttt{as.vector}, \texttt{as.matrix}, \texttt{as.data.frame},
\texttt{as.array}, \texttt{as.list}, (in general
\texttt{as.newformat}).

Just be aware that when coercing stuff into a matrix or vector, that these can only accomodate a single data type at a time, so you might get unexpected results.

\subsection{Fundamental Mathematical Functions}

In tables~\ref{tab:ArithmeticFunctionsInR}, ~\ref{tab:FunctionsInR}
and~\ref{tab:ArithmeticFunctionsR2} several important mathematical
functions, which are available in \texttt{R}, are presented. 
\begin{table*}[!h]
  \centering
  \begin{tabular}{c|c}
    \texttt{R}-function & description \\\hline\hline
    abs() & absolute function\\
    exp() & exponential function\\
    log10() & base 10 logarithm\\
    log() & natural logarithm\\
    sign() & gives the sign of the argument ($+$ or $-$)\\
    sqrt() & square root\\
    sin()/ cos()/ tan() & sine/ cosine/ tangent
  \end{tabular}
  \caption{Fundamental Arithmetic Functions}
  \label{tab:ArithmeticFunctionsInR}
\end{table*}

\begin{table*}[!h]
  \centering
  \begin{tabular}{c|c}
    \texttt{R}-function & description \\\hline\hline
    choose(n,k) & binomial coefficient $n \choose k$\\
    factorial(n) & factorial $n!$\\
    round(x, digits = 2) & round the value x
    to 2nd decimal point\\
    trunc() & cut the positions after the decimal point\\
    ceiling() & round up to integer\\
    floor() & round down to integer
  \end{tabular}
  \caption{Fundamental Functions}
  \label{tab:FunctionsInR}
\end{table*}
\begin{table*}[!h]
  \centering
  \begin{tabular}{c|c}
    \texttt{R}-function & description \\\hline\hline
    min() & minimum component of a vector\\
    max() & maximum component of a vector\\
    range() & max and min components of a vector\\
    sum() & sum of all components of a vector\\
    prod() & product of all components of the argument vector\\
    cumsum() & returns a vector whose elements are the cumulative sums\\
    cumprod() & returns a vector whose elements are the cumulative products
  \end{tabular}
  \caption{Arithmetic Functions for Vectors}
  \label{tab:ArithmeticFunctionsR2}
\end{table*}

\subsection{Statistical Functions}
As mentioned before: \texttt{R} is a statistical/numerical
environment. Thus there are many statistical functions. In
table~\ref{tab:StatFunc} a few important ones are 
displayed. Table~\ref{tab:StatFunc} should only serve as an
overview. In the following lectures we will get to know more and more
statistical functions.

\begin{table*}[h]
  \centering
  \begin{tabular}{c|c}
    \texttt{R}-function & desciption\\\hline\hline
    mean() & mean of the components of the vector\\
    median() & median of the components of the vector\\
    quantile() & quantiles of the components of the vector\\
    var() & variance of the components of the vector\\
    rank() &  ranks of the components of the vector\\
    unique() & vector without ties
  \end{tabular}
  \caption{Statistical Functions}
  \label{tab:StatFunc}
\end{table*}


\FloatBarrier

% \clearpage
\section{Exercises}

\subsection*{Exercise 1}

First, construct the following objects:
\begin{itemize}
\item[(i)]      \texttt{A}: a vector of 20 numbers from 15 to 250 
\item[(ii)]     \texttt{B}: a vector of length 50 where the integers
  from 1 to 10 are repeated 5 times
\end{itemize}

Then compute:
\begin{itemize}
\item[(i)]      the logarithm of base 2 for \texttt{A}
\item[(ii)]     the logarithm of base 10 for \texttt{B}
\item[(iii)]    the natural logarithm for \texttt{A}
\end{itemize}

Remember that the function \texttt{log(x)} calculates the logarithm of
\texttt{x}, for a given base. See its documentation.


\subsection*{Exercise 2}

We have a population of 10 individuals. We have information on their
sex, height, education. Table \ref{tab:simpledataset} presents this
dataset. 

\begin{table*}[h]
    \centering
    \begin{tabular}{c|c|c|c}
            ID & sex & height (cm) & education \\\hline\hline
             1 &  M  &    178      & primary   \\
             2 &  M  &    168      & secondary   \\
             3 &  F  &    169      & primary   \\
             4 &  M  &    170      & tertiary   \\
             5 &  F  &    157      & tertiary   \\
             6 &  M  &    185      & primary   \\
             7 &  F  &    178      & tertiary   \\
             8 &  M  &    173      & secondary  \\
             9 &  F  &    172      & primary   \\
            10 &  M  &    180      & secondary   \\
           \end{tabular}
    \caption{Simple dataset}
    \label{tab:simpledataset}
\end{table*}

Create vectors containing the information for this population
(\texttt{ID}, \texttt{sex}, \texttt{height}, \texttt{educ}), and calculate:
\begin{itemize}
\item[(i)] the median heights for the males
\item[(ii)] the variance of the heights for the females
\item[(iii)] the mean of the heights for the individuals with tertiary education
\item[(iv)] which individuals are higher than 170 cm
\end{itemize}

\subsection*{Exercise 3}
The \citet{HMD} provides detailed
mortality and population data. At present the database contains
detailed data for a collection of over 35 countries or areas. Some
mortality data on Austria can be found in the data directory of
this course in ownloud. The names of the required data files
are \texttt{popAustria.txt} and \texttt{deathsAustria.txt}. The
first data set contains the the Austrian population by
age (ages range from 0 to 110$+$ years) for the period 2000-2005. The
second data set contains the corresponding number of deaths in
Austria.

The tasks of this exercise are:
\begin{itemize}
\item[(i)] Read the data in.
\item[(ii)] Calculate the total sum of people who were living in
  Austria in the year 2005. 
\item[(iii)] Calculate the total sum of people who died in Austria in
  the year 2005. 
\item[(iv)] What's the crude death rate for Austria in 2005?
\item[(v)] Select the last three years of the data set (i.e.~2003,
  2004, 2005) and calculate the mean age of death for these three
  years together. 
\item[(vi)] Merge the population counts and the death counts for the
  year 2001 into one data set. 
\item[(v)] Merge the population counts and the death counts for all
  the available years into one data set. 
\end{itemize}

\subsection*{Exercise 4}
\begin{itemize}
\item[(i)] Create the following data frame \texttt{Dat}:
  \begin{verbatim}
      ID  time    age     drug    censor
      1   9       46      0       1
      1   6       49      1       0
      2   10      23      0       1
      3   5.5     19      0       1
      3   6       29.5    0       1
      3   15      28.5    1       1
      4   3       34      0       0
      5   13      28      1       0
  \end{verbatim}
\item[(ii)] Create out of \texttt{Dat} a new data frame \texttt{Dat2}
  that only contains the variables \texttt{ID} and \texttt{drug}. 
\item[(iii)] Create out of \texttt{Dat} a new data frame \texttt{Dat3}
  that only contains the values of the individuals with an \texttt{ID}
  that equals to $1$ or $3$.
\item[(iv)] Sort the data set \texttt{Dat} both descending and ascending
  according to \texttt{time}.
\end{itemize}

\bibliographystyle{chicago}
\bibliography{bibliography}

\end{document}